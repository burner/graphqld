schema {
	mutationType: Mutation
	queryType: Query
	subscriptionType: Subscription
}
type Query {
	shipsselection(ids: [Int!]!): [Starship!]!
	currentTime: DateTime!
	starships(overSize: Float!): [Starship!]!
	captain(series: Series!): Character!
	humanoids: [Humanoid!]!
	starship(id: Int!): Starship
	starshipSimple2(id: Int!): StarshipSimple2
	androids: [Android!]!
	resolverWillThrow: [Android!]!
	numberBetween(searchInput: InputIn!): Starship!
	search(name: String!): SearchResult!
	starshipSimple3(id: Int!): StarshipSimple3
	starshipSimple(id: Int!): StarshipSimple
	starshipDoesNotExist: Starship!
	character(id: Int!): Character
	alwaysEmpty: [Starship!]
}
type StarshipSimple {
	commander: Character!
}
input StarshipSimpleIn {
	commander: CharacterIn!
}
scalar Date
type Android implements Character {
	isDead: Boolean!
	ships: Starship
	series: [Series!]!
	id: Int!
	ship: Starship
	primaryFunction: String!
	name: String!
	allwaysNull: Starship
	commands: [Character!]!
	alsoAllwaysNull: Int
	someOldField: Int! @deprecated(reason: "Stupid name")
	commanders: [Character!]!
}
input AndroidIn {
	isDead: Boolean!
	ships: StarshipIn
	series: [Series!]!
	id: Int!
	ship: StarshipIn
	primaryFunction: String!
	name: String!
	allwaysNull: StarshipIn
	commands: [CharacterIn!]!
	alsoAllwaysNull: Int
	someOldField: Int! @deprecated(reason: "Stupid name")
	commanders: [CharacterIn!]!
}
type Subscription {
	starships: [Starship!]!
}
enum Series {
	TheOriginalSeries,
	TheNextGeneration,
	DeepSpaceNine,
	Voyager,
	Enterprise,
	Discovery,
}
type Input {
	first: Int!
	after: String
}
input InputIn {
	first: Int!
	after: String
}
type Starship {
	series: [Series]!
	id: Int!
	commander: Character!
	name: String!
	size: Float!
	crew: [Character!]!
	designation: String!
}
input StarshipIn {
	series: [Series]!
	id: Int!
	commander: CharacterIn!
	name: String!
	size: Float!
	crew: [CharacterIn!]!
	designation: String!
}
type StarshipSimple2 {
	id: Int!
}
input StarshipSimple2In {
	id: Int!
}
input Vector {
	y: Float!
	x: Float!
}
type StarshipSimple3 {
	series: [Series]!
}
input StarshipSimple3In {
	series: [Series]!
}
input AddCrewmanData {
	shipId: Int!
	location: Vector!
	series: [Series!]!
	name: String!
}
interface Character {
	isDead: Boolean!
	ships: Starship
	series: [Series!]!
	id: Int!
	ship: Starship
	name: String!
	allwaysNull: Starship
	commands: [Character!]!
	alsoAllwaysNull: Int
	someOldField: Int! @deprecated(reason: "Stupid name")
	commanders: [Character!]!
}
input CharacterIn {
	isDead: Boolean!
	ships: StarshipIn
	series: [Series!]!
	id: Int!
	ship: StarshipIn
	name: String!
	allwaysNull: StarshipIn
	commands: [CharacterIn!]!
	alsoAllwaysNull: Int
	someOldField: Int! @deprecated(reason: "Stupid name")
	commanders: [CharacterIn!]!
}
type Mutation {
	getStupidestCrewman: Character!
	addCrewman(input: AddCrewmanData!): Character!
}
type Humanoid implements Character {
	isDead: Boolean!
	ships: Starship
	series: [Series!]!
	id: Int!
	ship: Starship
	dateOfBirth: Date!
	name: String!
	species: String!
	allwaysNull: Starship
	commands: [Character!]!
	alsoAllwaysNull: Int
	someOldField: Int! @deprecated(reason: "Stupid name")
	commanders: [Character!]!
}
input HumanoidIn {
	isDead: Boolean!
	ships: StarshipIn
	series: [Series!]!
	id: Int!
	ship: StarshipIn
	dateOfBirth: Date!
	name: String!
	species: String!
	allwaysNull: StarshipIn
	commands: [CharacterIn!]!
	alsoAllwaysNull: Int
	someOldField: Int! @deprecated(reason: "Stupid name")
	commanders: [CharacterIn!]!
}
scalar SearchResult
scalar DateTime
